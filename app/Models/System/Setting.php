<?php

namespace App\Models\System;

use App\Models\MainModelSoft;
use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;
use Spatie\Activitylog\LogOptions;
use Spatie\Activitylog\Traits\LogsActivity;

class Setting extends MainModelSoft
{
    use LogsActivity ;
    protected $table = 'settings';
    protected $fillable = [
        'group','type','key', 'value','locale','autoload','parent_id'
    ];

//    protected $casts = ['value'=>'array'];
//    protected function value(): Attribute
//    {
//        return Attribute::make(
//            get: fn ($value) => json_decode($value, true),
//            set: fn ($value) => json_encode($value),
//        );
//    }

    public static function getAllSettings()
    {
        $cacheKey = 'settings';

        if (Cache::has($cacheKey)) {
            return Cache::get($cacheKey);
        }

        $settings = self::all();

        Cache::forever($cacheKey, $settings);

        Log::info('Settings cached');

        return $settings;
    }

    /**
     * Retrieve a setting value by key and group.
     *
     * @param  string  $key
     * @param  string|null  $group
     * @return string|null
     */
    public static function getValue(string $key, ?string $group = null): ?string
    {
        $settings = self::getAllSettings();

        $setting = $settings->first(function ($setting) use ($key, $group) {
            return $setting->key === $key && $setting->group === $group;
        });

        return $setting ? $setting->value : null;
    }

    /**
     * Clear the cache for all settings.
     *
     * @return void
     */
    public static function clearCache(): void
    {
        Cache::forget('settings');
    }

protected static function boot()
{
    parent::boot(); // TODO: Change the autogenerated stub

    static::updated(function(){
        self::clearCache();
    });

    static::created(function(){
        self::clearCache();
    });
}


    public function parentID() {
        return $this->belongsTo(Setting::class, 'parent_id')->withDefault(['name' => __('None')]);
    }

    public function getActivitylogOptions(): LogOptions
    {
        return LogOptions::defaults()
            ->setDescriptionForEvent(fn(string $eventName) => "Setting has been {$eventName}")
            ->logOnly([ 'group', 'value', 'lang', 'type','autoload'])
            ->logOnlyDirty()
            ->useLogName('system');
        // Chain fluent methods for configuration options
    }
}
